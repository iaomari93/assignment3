#!/usr/bin/env python

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
# [[0.0,0.0],[0.0,2.2],C,[-1.8,4.7],[1.5,2.2],[1.5,5.8],[3.1,5.8],[3.1,7.5],[-0.8,5.8],[-0.8,8]


def find_path(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return path
        if not graph.has_key(start):
            return None
        for node in graph[start]:
            if node not in path:
                newpath = find_path(graph, node, end, path)
                if newpath: return newpath
        return None

def movebase_client():
    nodes = [[0.0,0.0],[0.0,1.8],[-1.8,2.0],[-1.8,4.7],[1.5,2.2],[1.5,5.5],[3.1,5.8],[3.1,7.5],[-0.8,5.8],[-0.8,8.0]]
    graph = {"0": {"1"},
             "1": {"0","2", "4"},
             "2": {"1","3"},
             "3": {"2"},
             "4": {"1","5"},
             "5": {"4","6","8"},
             "6": {"5","7"},
             "7": {"6"},
             "8": {"5","9"},
             "9": {"8"}}
    ops = find_path(graph,"0","9")
    # print(ops)
    # x = int(ops[3])
    # print (nodes[x][1])
    client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
    client.wait_for_server()

    goal = MoveBaseGoal()
    for x in ops:
        x = int(x)
        print("driving to node {}".format(x))
        node = nodes[x]
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = node[1]
        goal.target_pose.pose.position.y = node[0]
        goal.target_pose.pose.orientation.w = 1.0
        client.send_goal(goal)
        wait = client.wait_for_result()
        if wait:
            print("reach node {}".format(x))
    #     # print(wait)
    # if not wait:
    #     rospy.logerr("Action server not available!")
    #     rospy.signal_shutdown("Action server not available!")
    # else:
    #     goal.target_pose.header.frame_id = "map"
    #     goal.target_pose.header.stamp = rospy.Time.now()
    #     goal.target_pose.pose.position.x = 2.2
    #     goal.target_pose.pose.position.y = 1.5
    #     goal.target_pose.pose.orientation.w = 1.0

    #     client.send_goal(goal)
    #     wait = client.wait_for_result()
    #     # print(wait)
    #     if not wait:
    #         rospy.logerr("Action server not available!")
    #         rospy.signal_shutdown("Action server not available!")
    #     else:
    #         return client.get_result()


if __name__ == '__main__':
    try:
        rospy.init_node('movebase_client_py')
        result = movebase_client()
        print(result)
        if result:
            rospy.loginfo("Goal execution done!")
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation test finished.")